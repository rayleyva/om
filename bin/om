#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys

from om.supervisor import Supervisor

__help__ = '''Usage:
    Collect data for hosts:

        $ om host1,host2,host3

    Custom user, password and port:

        $ om user:password@host:port

    JSON output on stdout:

        $ om host -j

    Listing handlers:

        $ om -l

    Prints this help:

        $ om -h

    Version:

        $ om -v
'''

def usage():
    print __help__

def version():
    import om
    print om.__version__

def temp_config(data):
    import tempfile, json
    config = tempfile.NamedTemporaryFile()
    config.write(json.dumps(data))
    config.seek(0)
    return config

def parse_machine(machine):
    config = {'ssh': {}}

    if '@' in machine:
        userpart, machine = machine.split('@')
        if ':' in userpart:
            config['ssh']['username'], config['ssh']['password'] = userpart.split(':')
        else:
            config['ssh']['username'] = userpart

    if ':' in machine:
        config['host'], config['ssh']['port'] = machine.split(':')
        config['ssh']['port'] = int(config['ssh']['port'])
    else:
        config['host'] = machine

    return config

def parse_hosts():
    hosts = {}
    for machine in sys.argv[1].split(','):
        config = parse_machine(machine)
        hosts[config['host']] = config
    return hosts

def list_plugins():
    from om.plugin import list_plugins, list_default_plugins
    print 'Available plugins:'
    for plugin in list_plugins():
        print "\t%s" % plugin.name
    print '\nDefault plugins: %s' % ', '.join([p.name for p in list_default_plugins()])

def list_handlers():
    from om.handler import list_handlers
    print 'Available handlers:'
    for handler in list_handlers():
        print "\t%s" % handler.__name__


if __name__ == '__main__':
    supervisor = None

    if len(sys.argv) == 2 and sys.argv[1].startswith('-'):
        {'-h': usage,
         '-v': version,
         '-l': list_handlers}.get(sys.argv[1], usage)()
        sys.exit(0)


    if len(sys.argv) >= 2:
        if len(sys.argv) == 3 and sys.argv[1] == '-c':
            config_file = sys.argv[2]
            supervisor = Supervisor(config_file)
        else:
            handlers = {}

            if '-j' in sys.argv:
                handlers['json_stdout'] = {}
            else:
                handlers['stdout'] = {}

            config = temp_config({'hosts': parse_hosts(), 'handlers': handlers})
            supervisor = Supervisor(config.name)

    if supervisor:
        supervisor.run()
